Generator(
  (net): Sequential(
    (0): ConvTranspose2d(128, 512, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): LayerNorm2d(
      (norm): GroupNorm(512, 512, eps=1e-05, affine=True)
    )
    (2): ReLU()
    (3): ConvTranspose2d(512, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): LayerNorm2d(
      (norm): GroupNorm(256, 256, eps=1e-05, affine=True)
    )
    (5): ReLU()
    (6): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): LayerNorm2d(
      (norm): GroupNorm(128, 128, eps=1e-05, affine=True)
    )
    (8): ReLU()
    (9): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): LayerNorm2d(
      (norm): GroupNorm(64, 64, eps=1e-05, affine=True)
    )
    (11): ReLU()
    (12): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  )
)
Discriminator(
  (net): Sequential(
    (0): Conv2d(1, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): LeakyReLU(negative_slope=0.2)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (3): LayerNorm2d(
      (norm): GroupNorm(128, 128, eps=1e-05, affine=True)
    )
    (4): LeakyReLU(negative_slope=0.2)
    (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (6): LayerNorm2d(
      (norm): GroupNorm(256, 256, eps=1e-05, affine=True)
    )
    (7): LeakyReLU(negative_slope=0.2)
    (8): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (9): LayerNorm2d(
      (norm): GroupNorm(512, 512, eps=1e-05, affine=True)
    )
    (10): LeakyReLU(negative_slope=0.2)
    (11): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), bias=False)
  )
)

Epoch 1/1
Traceback (most recent call last):
  File "C:\Users\dell\Desktop\git\main.py", line 103, in <module>
    main(config)
  File "C:\Users\dell\Desktop\git\main.py", line 72, in main
    trainer.train(data_loader, epochs, save_training_gif=False)
  File "C:\Users\dell\Desktop\git\training.py", line 174, in train
    self._train_epoch(data_loader)
  File "C:\Users\dell\Desktop\git\training.py", line 127, in _train_epoch
    self._critic_train_iteration(data)
  File "C:\Users\dell\Desktop\git\training.py", line 40, in _critic_train_iteration
    generated_data = self.sample_generator(batch_size)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\Desktop\git\training.py", line 186, in sample_generator
    latent_samples = self.G.sample_latent(num_samples)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\Desktop\git\models.py", line 144, in sample_latent
    return torch.randn((num_samples, self.latent_dim))
                                     ^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1709, in __getattr__
    raise AttributeError(f"'{type(self).__name__}' object has no attribute '{name}'")
AttributeError: 'Generator' object has no attribute 'latent_dim'
